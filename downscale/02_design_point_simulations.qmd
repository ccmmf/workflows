---
title: "Design Point Selection"
author: "David LeBauer"
---

# Overview

This workflow will:

- Use SIPNET to simulate SOC and biomass for each design point.
- generate a dataframe with site_id, lat, lon, soil carbon, biomass

## SIPNETWOPET [surrogate model] 

Until SIPNET predictions are available, we will introduce a new model, SIPNETWOPET, the Simpler Photosynthesis and EvapoTranspiration model, WithOut Photosynthesis and EvapoTranspiration.

```{r}
library(tidyverse)
```


```{r}
# Define SIPNETWOPET function

sipnetwopet <- function(
  mean_temp, precip, clay, ocd, twi, seed = 8675.309
) {
  set.seed(seed)
  # Manually scale inputs using predefined dataset statistics
  # scaled = (x - mean(x)) / sd(x)
  scaled_temp <- (mean_temp - 20) / 2
  scaled_precip <- (precip - 5000) / 2000
  scaled_clay <- (clay - 20) / 6
  scaled_ocd <- (ocd - 300) / 60
  scaled_twi <- (twi - 10) / 2
  
  # Add stochastic variation = 10% * sd
  scaled_temp <- scaled_temp * rnorm(1, 1, 0.1)
  scaled_precip <- scaled_precip * rnorm(1, 1, 0.1)
  scaled_clay <- scaled_clay * rnorm(1, 1, 0.1)
  scaled_ocd <- scaled_ocd * rnorm(1, 1, 0.1)
  scaled_twi <- scaled_twi * rnorm(1, 1, 0.1)

  # Simulate SOC with asymptotic bounds
  .soc <- 80 + 15 * scaled_precip + 12 * scaled_temp + 50 * scaled_ocd + 15 * scaled_clay + 8 * scaled_twi +
    rnorm(1, 0, 10)
  soc <- 90 * (.soc / (100 + abs(.soc))) + rlnorm(1, meanlog = log(5), sdlog = 0.3)  # Asymptotic upper and soft lower bound

  # Simulate AGB with soft lower bound constraint
  .agb <- 120 + 25 * scaled_temp + 35 * scaled_precip + 10 * scaled_clay -
    8 * scaled_twi + rnorm(1, 0, 15)
  agb <- 450 * (.agb / (500 + abs(.agb))) + rlnorm(1, meanlog = log(20), sdlog = 0.4) # Asymptotic upper and soft lower bound

  return(tibble::tibble(soc = soc, agb = agb))
}

```

### SIPNETWOPET Demonstration

```{r sipnetwopet-demo}
# Example dataset
n <- 100
set.seed(77.77)
example_sites <- tibble::tibble(
  mean_temp = rnorm(n, 16, 2),
  precip = rweibull(n, shape = 2, scale = 4000),
  clay = 100 * rbeta(n, shape1 = 2, shape2 = 5),
  ocd = rweibull(n, shape = 2, scale = 320),
  twi = rweibull(n, shape = 2, scale = 15)
)

# Apply function using rowwise mapping
example_results <- example_sites |> 
  dplyr::rowwise() |> 
  dplyr::mutate(result = list(sipnetwopet(mean_temp, precip, clay, ocd, twi))) |> 
  tidyr::unnest(result)

print(example_results)
pairs(example_results)
```

### Design Point Covariates

```{r}

design_points <- read_csv('data/final_design_points.csv') 
covariates <- read_csv("data/data_for_clust_with_ids.rda") |> get()

design_point_covs <- design_points |> 
  left_join(covariates, by = 'id')
model_inputs <- covariates
```